/*
 * üîê ARQUIVO ASSINADO DIGITALMENTE
 * 
 * ‚úçÔ∏è Assinado por: Jistriane Brunielli Silva de Oliveira
 * üìÖ Validade: 10 anos (at√© 2035)
 * üîí M√©todo: RSA-4096 + SHA-512
 * üìú Verifica√ß√£o: SIGNATURE.md
 * ‚ö†Ô∏è  MODIFICA√á√ïES N√ÉO AUTORIZADAS INVALIDAR√ÉO A ASSINATURA
 */


#!/bin/bash

# Configura√ß√µes
BACKUP_DIR="/var/backups/redis"
RETENTION_DAYS=7
REDIS_CONTAINER="yieldswap-redis"
S3_BUCKET="s3://yieldswap-backups/redis"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_FILE="redis_backup_${TIMESTAMP}.rdb"

# Criar diret√≥rio de backup se n√£o existir
mkdir -p ${BACKUP_DIR}

# Fun√ß√£o para log
log() {
  echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
}

# Fun√ß√£o para enviar notifica√ß√£o via Slack
notify_slack() {
  if [ ! -z "${SLACK_WEBHOOK_URL}" ]; then
    curl -X POST -H 'Content-type: application/json' \
      --data "{\"text\":\"$1\"}" \
      ${SLACK_WEBHOOK_URL}
  fi
}

# Fun√ß√£o para limpar backups antigos
cleanup_old_backups() {
  log "Limpando backups mais antigos que ${RETENTION_DAYS} dias"
  find ${BACKUP_DIR} -type f -name "redis_backup_*.rdb" -mtime +${RETENTION_DAYS} -delete
  aws s3 ls ${S3_BUCKET}/ | grep "redis_backup_" | while read -r line; do
    timestamp=$(echo $line | awk '{print $4}' | sed 's/redis_backup_\([0-9]\{8\}\).*/\1/')
    if [ $(( ($(date +%s) - $(date -d "${timestamp}" +%s)) / 86400 )) -gt ${RETENTION_DAYS} ]; then
      aws s3 rm "${S3_BUCKET}/${line##* }"
    fi
  done
}

# Fun√ß√£o para verificar integridade do backup
verify_backup() {
  local backup_file=$1
  if redis-check-rdb ${backup_file}; then
    log "Verifica√ß√£o do backup conclu√≠da com sucesso"
    return 0
  else
    log "ERRO: Backup corrompido"
    notify_slack "‚ö†Ô∏è ALERTA: Backup do Redis corrompido - ${backup_file}"
    return 1
  fi
}

# Iniciar backup
log "Iniciando backup do Redis"
notify_slack "üîÑ Iniciando backup do Redis"

# Executar backup via redis-cli
if docker exec ${REDIS_CONTAINER} redis-cli SAVE; then
  # Copiar arquivo RDB do container
  docker cp ${REDIS_CONTAINER}:/data/dump.rdb ${BACKUP_DIR}/${BACKUP_FILE}
  
  # Verificar integridade
  if verify_backup ${BACKUP_DIR}/${BACKUP_FILE}; then
    # Comprimir backup
    gzip ${BACKUP_DIR}/${BACKUP_FILE}
    
    # Enviar para S3
    if aws s3 cp ${BACKUP_DIR}/${BACKUP_FILE}.gz ${S3_BUCKET}/${BACKUP_FILE}.gz; then
      log "Backup enviado para S3 com sucesso"
      notify_slack "‚úÖ Backup do Redis conclu√≠do e enviado para S3"
      
      # Limpar backups antigos
      cleanup_old_backups
    else
      log "ERRO: Falha ao enviar backup para S3"
      notify_slack "‚ùå ERRO: Falha ao enviar backup do Redis para S3"
    fi
  fi
else
  log "ERRO: Falha ao executar backup do Redis"
  notify_slack "‚ùå ERRO: Falha ao executar backup do Redis"
  exit 1
fi

# Remover arquivo local ap√≥s envio para S3
rm -f ${BACKUP_DIR}/${BACKUP_FILE}*

log "Processo de backup conclu√≠do" 