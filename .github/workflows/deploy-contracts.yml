name: Deploy YieldSwap Contracts

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'packages/contracts/**'
      - 'scripts/deploy-xbull-ci.sh'
  workflow_dispatch:
    inputs:
      network:
        description: 'Network to deploy to'
        required: true
        default: 'testnet'
        type: choice
        options:
        - testnet
        - futurenet
      force_deploy:
        description: 'Force deploy even if no changes'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  deploy:
    name: Deploy Contracts
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write
    
    outputs:
      contract_id: ${{ steps.deploy.outputs.CONTRACT_ID }}
      deploy_key: ${{ steps.deploy.outputs.DEPLOY_PUBLIC_KEY }}
    
    steps:
    - name: 🔍 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🦀 Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown
        override: true
        components: rustfmt, clippy
    
    - name: 📦 Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          packages/contracts/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: 🔧 Install Soroban CLI
      run: |
        cargo install soroban-cli --locked --force
        soroban --version
    
    - name: 🏗️  Build contracts
      working-directory: packages/contracts
      run: |
        cargo build --target wasm32-unknown-unknown --release
        ls -la target/wasm32-unknown-unknown/release/
    
    - name: 🧪 Run contract tests
      working-directory: packages/contracts
      run: cargo test
    
    - name: 🚀 Deploy contracts
      id: deploy
      env:
        XBULL_SECRET_KEY: ${{ secrets.XBULL_SECRET_KEY }}
        XBULL_PUBLIC_KEY: ${{ vars.XBULL_PUBLIC_KEY || 'GALGAC3V44PCOQJG6AVU5MJNA3UTMJNMYMF3DTGMTZ2VQVPUBXZWREX7' }}
        DEPLOY_NETWORK: ${{ github.event.inputs.network || 'testnet' }}
        CI: true
      run: |
        chmod +x scripts/deploy-xbull-ci.sh
        ./scripts/deploy-xbull-ci.sh
    
    - name: 📄 Upload deploy artifacts
      uses: actions/upload-artifact@v3
      with:
        name: contract-deployment-${{ github.run_number }}
        path: |
          .env.contracts
          packages/contracts/target/wasm32-unknown-unknown/release/*.wasm
        retention-days: 30
    
    - name: 💬 Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const contractId = '${{ steps.deploy.outputs.CONTRACT_ID }}';
          const publicKey = '${{ steps.deploy.outputs.DEPLOY_PUBLIC_KEY }}';
          const network = '${{ github.event.inputs.network || 'testnet' }}';
          
          const comment = `## 🚀 Deploy de Contratos Realizado
          
          **Informações do Deploy:**
          - **Contract ID:** \`${contractId}\`
          - **Public Key:** \`${publicKey}\`
          - **Network:** ${network}
          - **Commit:** ${context.sha.substring(0, 7)}
          
          **Links úteis:**
          - [🔍 Explorar Conta](https://stellar.expert/explorer/${network}/account/${publicKey})
          - [📋 Explorar Contrato](https://stellar.expert/explorer/${network}/contract/${contractId})
          
          > Deploy realizado automaticamente via GitHub Actions ✅`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: 📊 Deploy summary
      run: |
        echo "## 🎉 Deploy Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Contract ID:** \`${{ steps.deploy.outputs.CONTRACT_ID }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Public Key:** \`${{ steps.deploy.outputs.DEPLOY_PUBLIC_KEY }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Network:** ${{ github.event.inputs.network || 'testnet' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow:** [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Stellar Expert - Conta](https://stellar.expert/explorer/${{ github.event.inputs.network || 'testnet' }}/account/${{ steps.deploy.outputs.DEPLOY_PUBLIC_KEY }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Stellar Expert - Contrato](https://stellar.expert/explorer/${{ github.event.inputs.network || 'testnet' }}/contract/${{ steps.deploy.outputs.CONTRACT_ID }})" >> $GITHUB_STEP_SUMMARY

  update-config:
    name: Update Application Config
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    
    steps:
    - name: 🔍 Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 📝 Update environment files
      run: |
        # Atualiza configurações do frontend
        if [ -f "apps/web/.env-dev" ]; then
          sed -i '/NEXT_PUBLIC_CONTRACT_ID=/d' apps/web/.env-dev
          echo "NEXT_PUBLIC_CONTRACT_ID=${{ needs.deploy.outputs.contract_id }}" >> apps/web/.env-dev
        fi
        
        # Atualiza configurações da API
        if [ -f "apps/api/.env-dev" ]; then
          sed -i '/YIELD_SWAP_CONTRACT_ID=/d' apps/api/.env-dev
          echo "YIELD_SWAP_CONTRACT_ID=${{ needs.deploy.outputs.contract_id }}" >> apps/api/.env-dev
        fi
        
        # Cria arquivo de configuração principal
        cat > .env.contracts << EOF
        # Deploy automático - $(date)
        CONTRACT_ID=${{ needs.deploy.outputs.contract_id }}
        DEPLOY_PUBLIC_KEY=${{ needs.deploy.outputs.deploy_key }}
        NETWORK=${{ github.event.inputs.network || 'testnet' }}
        DEPLOY_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        GITHUB_RUN_ID=${{ github.run_id }}
        COMMIT_SHA=${{ github.sha }}
        EOF
    
    - name: 💾 Commit configuration updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .env.contracts apps/web/.env-dev apps/api/.env-dev
        if git diff --staged --quiet; then
          echo "Nenhuma alteração para commit"
        else
          git commit -m "🤖 Atualiza configurações do contrato após deploy
          
          - Contract ID: ${{ needs.deploy.outputs.contract_id }}
          - Network: ${{ github.event.inputs.network || 'testnet' }}
          - Deploy: ${{ github.run_id }}"
          git push
        fi 